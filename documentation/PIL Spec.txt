Machine Registers:
A                       -    Accumulator
B                       -    Second operand
PC                      -    Program Counter
SP                      -    Stack Pointer
FLAG        NZ------    -    Flag register
    NEG     -   Negative
    ZER     -   Zero

Lowops and Memory Stores:
0x00                        NOP     -   Do Nothing
0x01                        RES     -   Reserved
0x02                        RES     -   Reserved
0x03                        RES     -   Reserved
0x04                        RES     -   Reserved
0x05                        RES     -   Reserved
0x06                        RES     -   Reserved
0x07                        RES     -   Reserved
0x08 0xXXXXXXXXXXXXXXXX     STA64   -   Store A as 64 bit
0x09 0xXXXXXXXXXXXXXXXX     STA32   -   Store A as 32 bit
0x0A 0xXXXXXXXXXXXXXXXX     STA16   -   Store A as 16 bit
0x0B 0xXXXXXXXXXXXXXXXX     STA8    -   Store A as 8 bit
0x0C 0xXXXXXXXXXXXXXXXX     STB64   -   Store B as 64 bit
0x0D 0xXXXXXXXXXXXXXXXX     STB32   -   Store B as 32 bit
0x0E 0xXXXXXXXXXXXXXXXX     STB16   -   Store B as 16 bit
0x0F 0xXXXXXXXXXXXXXXXX     STB8    -   Store B as 8 bit

Load Registers:
0x10 0xXXXXXXXXXXXXXXXX     LAI64   -   Load 64 bit immediate to A
0x11 0xXXXXXXXX             LAI32   -   Load 32 bit immediate to A
0x12 0xXXXX                 LAI16   -   Load 16 bit immediate to A
0x13 0xXX                   LAI8    -   Load 8 bit immediate to A
0x14 0xXXXXXXXXXXXXXXXX     LAD64   -   Load 64 bit direct to A
0x15 0xXXXXXXXXXXXXXXXX     LAD32   -   Load 32 bit direct to A
0x16 0xXXXXXXXXXXXXXXXX     LAD16   -   Load 16 bit direct to A
0x17 0xXXXXXXXXXXXXXXXX     LAD8    -   Load 8 bit direct to A
0x18 0xXXXXXXXXXXXXXXXX     LBI64   -   Load 64 bit immediate to B
0x19 0xXXXXXXXX             LBI32   -   Load 32 bit immediate to B
0x1A 0xXXXX                 LBI16   -   Load 16 bit immediate to B
0x1B 0xXX                   LBI8    -   Load 8 bit immediate to B
0x1C 0xXXXXXXXXXXXXXXXX     LBD64   -   Load 64 bit direct to B
0x1D 0xXXXXXXXXXXXXXXXX     LBD32   -   Load 32 bit direct to B
0x1E 0xXXXXXXXXXXXXXXXX     LBD16   -   Load 16 bit direct to B
0x1F 0xXXXXXXXXXXXXXXXX     LBD8    -   Load 8 bit direct to B

Stack instructions:
0x20                        PHA64   -   Push A as 64 bit
0x21                        PHA32   -   Push A as 32 bit
0x22                        PHA16   -   Push A as 16 bit
0x23                        PHA8    -   Push A as 8 bit
0x24                        PHB64   -   Push B as 64 bit
0x25                        PHB32   -   Push B as 32 bit
0x26                        PHB16   -   Push B as 16 bit
0x27                        PHB8    -   Push B as 8 bit
0x28                        PLA64   -   Pull A as 64 bit
0x29                        PLA32   -   Pull A as 32 bit
0x2A                        PLA16   -   Pull A as 16 bit
0x2B                        PLA8    -   Pull A as 8 bit
0x2C                        PLB64   -   Pull B as 64 bit
0x2D                        PLB32   -   Pull B as 32 bit
0x2E                        PLB16   -   Pull B as 16 bit
0x2F                        PLB8    -   Pull B as 8 bit

Change PC instructions:
0x30 0xXXXXXXXXXXXXXXXX     CAL     -   Call function at address
0x31                        RET     -   Return from function
0x32 0xXXXXXXXXXXXXXXXX     JMP     -   Unconditional Jump
0x33 0xXXXXXXXXXXXXXXXX     JEQ     -   Jump if ZER set
0x34 0xXXXXXXXXXXXXXXXX     JGT     -   Jump if NEG unset
0x35                        RES     -   Reserved
0x36                        RES     -   Reserved
0x37                        RES     -   Reserved
0x38                        RES     -   Reserved
0x39                        RES     -   Reserved
0x3A                        RES     -   Reserved
0x3B                        RES     -   Reserved
0x3C                        RES     -   Reserved
0x3D                        RES     -   Reserved
0x3E                        RES     -   Reserved
0x3F                        RES     -   Reserved

ALU Instructions:
0x40                        ADD     -   Add B to A
0x41                        SUB     -   Subtract B from A
0x42                        NEA     -   Negate A
0x43                        NEB     -   Negate B
0x44                        AND     -   Store A and B in A
0x45                        OR      -   Store A or B in A
0x46                        XOR     -   Store A xor B in A
0x47                        RES     -   Reserved
0x48                        RES     -   Reserved
0x49                        RES     -   Reserved
0x4A                        SWP     -   Swap A and B
0x4B                        SPC     -   Swap SP and PC
0x4C                        APC     -   Swap A and PC
0x4D                        ASP     -   Swap A and SP
0x4E                        BPC     -   Swap B and PC
0x4F                        BSP     -   Swap B and SP

Native Functions:
0x50                        MTP     -   Convert A to P Address
0x51                        PTM     -   Convert A to M Address
0x52                        MCA     -   Machine Call (P Addr) (A and B passed in)
0x53                        RES     -   Reserved
0x54                        RES     -   Reserved
0x55                        RES     -   Reserved
0x56                        RES     -   Reserved
0x57                        RES     -   Reserved
0x58                        RES     -   Reserved
0x59                        RES     -   Reserved
0x5A                        RES     -   Reserved
0x5B                        RES     -   Reserved
0x5C                        RES     -   Reserved
0x5D                        RES     -   Reserved
0x5E                        RES     -   Reserved
0x5F                        RES     -   Reserved

0xFF                        HLT     -   Halt